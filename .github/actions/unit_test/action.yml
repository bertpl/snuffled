name: Unit Tests
author: bertpluymers
description: Run unit tests with specific python version, extras, dependency resolution

inputs:
    uv_version:
        required: true
        description: "Version of UV to be used."
    python_version:
        required: false
        description: "Version of Python to be used.  If omitted will default to version in .python-version"
        default: ""
    dependency_resolution:
        required: false
        description: "Type of dependency resolution to use.  One of 'highest' (default), 'lowest-direct', 'lowest' (discouraged)."
        default: "highest"
    include_all_extra_deps:
        required: false
        description: "Set to 'true' (default) to include all optional package dependencies. 'false' otherwise."
        default: "true"

runs:
    using: "composite"
    steps:
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ inputs.uv_version }}

      - name: Determine Python version
        shell: bash
        run: |
            if [ -n "${{ inputs.python_version }}" ]; then
                echo "PYTHON_EFFECTIVE_VERSION=${{ inputs.python_version }}" >> $GITHUB_ENV
            else
                PYTHON_VERSION=$(cat .python-version)
                echo "PYTHON_EFFECTIVE_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV                
            fi
            echo "Using PYTHON ${{ env.PYTHON_EFFECTIVE_VERSION }}."

      - name: Set up venv, Python ${{ env.PYTHON_EFFECTIVE_VERSION }} & dependencies
        shell: bash
        run:  |
            uv python install ${{ env.PYTHON_EFFECTIVE_VERSION }}
            uv venv --python ${{ env.PYTHON_EFFECTIVE_VERSION }}
            source .venv/bin/activate
            if [ "${{ inputs.include_all_extra_deps }}" = "true" ]; then
                uv pip compile --resolution ${{ inputs.dependency_resolution }} --all-extras --group dev pyproject.toml
                uv sync --all-extras --dev 
            else
                uv pip compile --resolution ${{ inputs.dependency_resolution }} --group dev pyproject.toml
                uv sync --dev 
            fi

      - name: Run tests
        shell: bash
        run:  |
            if [ "${{ inputs.include_all_extra_deps }}" = "true" ]; then
                uv run --all-extras --python ${{ env.PYTHON_EFFECTIVE_VERSION }} pytest ./tests
            else
                uv run --python ${{ env.PYTHON_EFFECTIVE_VERSION }} pytest ./tests
            fi